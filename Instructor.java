/****************************************************************
   PROGRAM:   ARITHMETIC CHALLENGE GAME
   AUTHOR:    Huitian Zhang
   STUDENT:   1100038016
   DUE DATE:  19/09/2016

   FUNCTION:  an arithmetic challenge game involving an instructor and student

   INPUT:     Challenging mathematical questions for the student.

   OUTPUT:    Doubly linked list of all questions, sorted lists, binary trees,
              behavioral graph of student and questions for the students.

   NOTES:     
****************************************************************/
package arithmeticchallengegame;

import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import static java.io.FileDescriptor.in;
import java.io.IOException;
import static java.lang.System.in;
import java.net.Socket;
import java.net.UnknownHostException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javafx.scene.paint.Color;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author student
 */
public class Instructor extends javax.swing.JPanel {

    public Instructor() {
        initComponents();
        AddJtableSorter();
        AddOperators();
        getParameters();
    }
    
    //VARIABLES - Chat related **These variables are used for the chat system between instructor and student
    private Socket socket = null;                   /* used for connection            */
    private DataInputStream console = null;         /* used to receive data from server             */
    private DataOutputStream streamOut = null;      /* used to send data out to server            */
    private ClientThread1 client = null;            /* thread used for this instructor class            */
    private String serverName = "localhost";        /* server name set to localhost             */
    private int serverPort = 4445;                  /* server port, should be same as student           */
    
    //VARIABLES - General
    HashMap<Double, String> AnswersHashMap = new HashMap<>();/*Hash map storing keys and strings of equation and answers*/
    Integer HashAnswer;                             /* hash code for answers sent           */
    String FirstNumber = "";                        /* first digit            */
    String Operator = "";                           /* operator        */    
    String SecondNumber = "";                       /* second digit            */
    String Equals = "=";
    String Answer = "";                                     /* answer           */
    DoublyLinkList QuestionDLL = new DoublyLinkList();      /* Doublylinked list used for sorting             */   
    List<Question> QuestionList = new ArrayList<>();        /* Question list used in the gridview           */
    List<Question> tempList = new ArrayList<>();            /* Temp question list used in the gridview when sorting is required          */
    BinaryTree bt = new BinaryTree();                       /* Binary tree used for the binary tree sorting            */
    boolean isBubbleSort;                                   /* Defines the type of sort, if not uses a different list           */
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblFirstNumber = new javax.swing.JLabel();
        lblOperator = new javax.swing.JLabel();
        lblSecondNumber = new javax.swing.JLabel();
        lblAnswer = new javax.swing.JLabel();
        lblQuestionPrompt = new javax.swing.JLabel();
        txtFirstNumber = new javax.swing.JTextField();
        txtSecondNumber = new javax.swing.JTextField();
        txtAnswer = new javax.swing.JTextField();
        cboOperator = new javax.swing.JComboBox();
        btnSend = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lblArrayOfQuestions = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPreviousQuestions = new javax.swing.JTable();
        btnBubbleSortOperator = new javax.swing.JButton();
        lblSort = new javax.swing.JLabel();
        btnInsertionSort = new javax.swing.JButton();
        lblLinkedList = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLinkedList = new javax.swing.JTextArea();
        lblBinaryTree = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtBinaryTree = new javax.swing.JTextArea();
        btnDisplayBinaryTree = new javax.swing.JButton();
        btnDisplayPreOrder = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnDisplayInOrder = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btnDisplayPostOrder = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        btnSelectionSort = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jpConnect = new javax.swing.JPanel();
        btnConnect = new javax.swing.JButton();
        lblMsg = new javax.swing.JLabel();
        btnDisplayHashMap = new javax.swing.JButton();

        jButton4.setText("Save");

        jButton5.setText("Display");

        jLabel5.setText("Pre-Order");

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Instructor");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        lblFirstNumber.setText("First Number");

        lblOperator.setText("Operator");

        lblSecondNumber.setText("Second Number");

        lblAnswer.setText("Answer");

        lblQuestionPrompt.setText("Enter a question, then click send");

        txtSecondNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSecondNumberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblQuestionPrompt)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFirstNumber)
                            .addComponent(lblSecondNumber)
                            .addComponent(lblAnswer)
                            .addComponent(lblOperator))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtAnswer, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                            .addComponent(txtSecondNumber)
                            .addComponent(txtFirstNumber)
                            .addComponent(cboOperator, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblQuestionPrompt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstNumber)
                    .addComponent(txtFirstNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOperator)
                    .addComponent(cboOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSecondNumber)
                    .addComponent(txtSecondNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAnswer)
                    .addComponent(txtAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52))
        );

        btnSend.setText("Send");
        btnSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSendMouseClicked(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblArrayOfQuestions.setText("Array of questions asked");

        tblPreviousQuestions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "+", "1", "=", "2"},
                {"3", "-", "2", "=", "1"},
                {"40", "X", "2", "=", "80"}
            },
            new String [] {
                "First Number", "Operator", "Second Number", "Equals", "Answer"
            }
        ));
        jScrollPane3.setViewportView(tblPreviousQuestions);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblArrayOfQuestions)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblArrayOfQuestions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnBubbleSortOperator.setText("Bubble");
        btnBubbleSortOperator.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBubbleSortOperatorMouseClicked(evt);
            }
        });
        btnBubbleSortOperator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBubbleSortOperatorActionPerformed(evt);
            }
        });

        lblSort.setText("Sort");

        btnInsertionSort.setText("Insertion");
        btnInsertionSort.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInsertionSortMouseClicked(evt);
            }
        });

        lblLinkedList.setText("Linked List");

        txtLinkedList.setColumns(20);
        txtLinkedList.setRows(5);
        txtLinkedList.setToolTipText("");
        jScrollPane1.setViewportView(txtLinkedList);

        lblBinaryTree.setText("Binary Tree (Of all questions - Added in the order they were asked)");

        txtBinaryTree.setColumns(20);
        txtBinaryTree.setRows(5);
        jScrollPane2.setViewportView(txtBinaryTree);

        btnDisplayBinaryTree.setText("Display");
        btnDisplayBinaryTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayBinaryTreeActionPerformed(evt);
            }
        });

        btnDisplayPreOrder.setText("Display");
        btnDisplayPreOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDisplayPreOrderMouseClicked(evt);
            }
        });

        jLabel4.setText("Pre-Order");

        btnDisplayInOrder.setText("Display");
        btnDisplayInOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDisplayInOrderMouseClicked(evt);
            }
        });

        jLabel6.setText("In-Order");

        btnDisplayPostOrder.setText("Display");
        btnDisplayPostOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDisplayPostOrderMouseClicked(evt);
            }
        });

        jLabel7.setText("Post-Order");

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnSelectionSort.setText("Selection");
        btnSelectionSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectionSortActionPerformed(evt);
            }
        });

        jpConnect.setBackground(new java.awt.Color(102, 102, 255));
        jpConnect.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnConnect.setText("Connect");
        btnConnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConnectMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jpConnectLayout = new javax.swing.GroupLayout(jpConnect);
        jpConnect.setLayout(jpConnectLayout);
        jpConnectLayout.setHorizontalGroup(
            jpConnectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConnectLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(btnConnect)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jpConnectLayout.setVerticalGroup(
            jpConnectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpConnectLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(btnConnect)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jpConnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(jpConnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        lblMsg.setText("*message");

        btnDisplayHashMap.setText("Print Hashmap In Console");
        btnDisplayHashMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayHashMapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnDisplayHashMap)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSend))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBubbleSortOperator, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnInsertionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSelectionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMsg)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(47, 47, 47)
                                            .addComponent(jLabel4)
                                            .addGap(151, 151, 151)
                                            .addComponent(jLabel6))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(39, 39, 39)
                                            .addComponent(btnDisplayPreOrder)
                                            .addGap(126, 126, 126)
                                            .addComponent(btnDisplayInOrder)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnDisplayPostOrder)
                                        .addComponent(jLabel7))
                                    .addGap(84, 84, 84))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblBinaryTree)
                                            .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGap(0, 0, Short.MAX_VALUE)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnDisplayBinaryTree))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLinkedList)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSend)
                    .addComponent(btnBubbleSortOperator)
                    .addComponent(lblSort)
                    .addComponent(btnInsertionSort)
                    .addComponent(btnExit)
                    .addComponent(btnSelectionSort)
                    .addComponent(btnDisplayHashMap))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblLinkedList)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBinaryTree)
                            .addComponent(btnDisplayBinaryTree))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnDisplayPreOrder)
                                    .addComponent(btnDisplayInOrder)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDisplayPostOrder)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblMsg)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSecondNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSecondNumberActionPerformed
        // TODO addbs your handling code here:
    }//GEN-LAST:event_txtSecondNumberActionPerformed

    private void btnDisplayBinaryTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayBinaryTreeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDisplayBinaryTreeActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
    System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendMouseClicked
Calculator();
AddToPreviousQuestionsTable();  
SendToStudent();
AnswersHashMap.put(Double.parseDouble(Answer), FirstNumber + Operator + SecondNumber + Equals + Answer);
    }//GEN-LAST:event_btnSendMouseClicked

    private void btnBubbleSortOperatorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBubbleSortOperatorMouseClicked

    }//GEN-LAST:event_btnBubbleSortOperatorMouseClicked

    private void btnBubbleSortOperatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBubbleSortOperatorActionPerformed
  isBubbleSort = true;
  BubbleSort();
  RefreshTable();
    }//GEN-LAST:event_btnBubbleSortOperatorActionPerformed

    private void btnInsertionSortMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsertionSortMouseClicked
   isBubbleSort = false;
   InsertionSort();
   RefreshTable();
    }//GEN-LAST:event_btnInsertionSortMouseClicked

    private void btnSelectionSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectionSortActionPerformed
    isBubbleSort = true;
    SelectionSort();
    RefreshTable();
    }//GEN-LAST:event_btnSelectionSortActionPerformed

    private void btnConnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConnectMouseClicked
     connect(serverName, serverPort);             
    }//GEN-LAST:event_btnConnectMouseClicked

    private void btnDisplayInOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDisplayInOrderMouseClicked
    
    txtBinaryTree.setText("In-Order: " + bt.InOrderTraverse(bt.root));
    }//GEN-LAST:event_btnDisplayInOrderMouseClicked

    private void btnDisplayPreOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDisplayPreOrderMouseClicked
     txtBinaryTree.setText("Pre-Order: " + bt.PreOrderTraverse(bt.root));
    }//GEN-LAST:event_btnDisplayPreOrderMouseClicked

    private void btnDisplayPostOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDisplayPostOrderMouseClicked
      txtBinaryTree.setText("Post-Order: " + bt.PostOrderTraverse(bt.root));
    }//GEN-LAST:event_btnDisplayPostOrderMouseClicked

    private void btnDisplayHashMapActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDisplayHashMapActionPerformed
    {//GEN-HEADEREND:event_btnDisplayHashMapActionPerformed
    GetHashMapSet();
    }//GEN-LAST:event_btnDisplayHashMapActionPerformed

/****************************************************************

   FUNCTION:   Get HashMap Set

   ARGUMENTS:  none

   RETURNS:    none

   NOTES:      Iterates through the hashmap and prints the Key and the value of each set.
****************************************************************/
    private void GetHashMapSet(){
      Set set = AnswersHashMap.entrySet();
      // Get an iterator
      Iterator i = set.iterator();
      // Display elements
      while(i.hasNext()) {
         Map.Entry me = (Map.Entry)i.next();
         System.out.print(me.getKey() + ": ");
         System.out.println(me.getValue());
      }
}
    
/****************************************************************

   FUNCTION:   Add a jTable Sorter

   ARGUMENTS:  none

   RETURNS:    none

   NOTES:      adds a simple sorter to your jTable
****************************************************************/
    private void AddJtableSorter()
    {
            TableRowSorter<TableModel> sorter  = new TableRowSorter<>(tblPreviousQuestions.getModel());
        tblPreviousQuestions.setRowSorter(sorter);
    }

    
/****************************************************************

   FUNCTION:   Selection Sort

   ARGUMENTS:  none

   RETURNS:    sets grid view to selection sorted

   NOTES:      Uses a selection sort algorithm to sort data in the grid view.
****************************************************************/    
    private void SelectionSort()
    {
     int i, j, first;
     Question qTemp;
     int QuestionListLength = QuestionList.size();
     
     for ( i = QuestionListLength - 1; i > 0; i -- )  
     {
          first = 0;   //initialize to subscript of first element
          for(j = 1; j <= i; j ++)   //locate smallest element between positions 1 and i.
          {
               if( Float.parseFloat(QuestionList.get(j).Answer) < Float.parseFloat(QuestionList.get(first).Answer))         
                 first = j;
          }
          qTemp = QuestionList.get(first);   //swap smallest found with element in position i.
          
          QuestionList.set(first, QuestionList.get(i)); //num[ first ] = num[ i ]; 
          QuestionList.set(i, qTemp);
      }           
    }
    
    
    
/****************************************************************

   FUNCTION:   Insertion Sort

   ARGUMENTS:  none

   RETURNS:    sets grid view to insertion sorted

   NOTES:      Uses a insertion sort algorithm to sort data in the grid view.
****************************************************************/    
    private void InsertionSort()
    {        
        int plusIndex=0;//Indexes the type of operator to know where to insert the object/value
        int minusIndex=0;
        int multiplyIndex=0;
        
        for (int index = 0; index<QuestionList.size(); index++)//Runs through the list only once w/ insertion sort
        {
            switch (QuestionList.get(index).Operator) {//Switch case finds what operator the question uses and inserts it accorting to the operator index
                case "+":
                    tempList.add(0, QuestionList.get(index));
                    plusIndex++;
                    break;
                case "-":
                    tempList.add(plusIndex, QuestionList.get(index));
                    minusIndex++;
                    break;
                case "X":
                    tempList.add(minusIndex, QuestionList.get(index));
                    multiplyIndex++;
                    break;
                case "/":
                    tempList.add(multiplyIndex, QuestionList.get(index));
                    break;
            }
        }
    }

/****************************************************************

   FUNCTION:   Get Question Values

   ARGUMENTS:  none

   RETURNS:    sets global variable values needed for the question

   NOTES:      gets the values from the text boxes
****************************************************************/    
        private void getValuesInsertionSort(int index)
    {
            FirstNumber = tempList.get(index).FirstNumber;
            Operator = tempList.get(index).Operator;
            SecondNumber = tempList.get(index).SecondNumber;
            Answer = tempList.get(index).Answer;
    }
    
/****************************************************************

   FUNCTION:   Bubble Sort

   ARGUMENTS:  none

   RETURNS:    sets grid view to bubble sorted

   NOTES:      bubble sort is slow with large amounts of data
****************************************************************/    
    private void BubbleSort()
    {
        Question tempQuestion = new Question();
        
        for  (int i=0; i < QuestionList.size(); i++)
            for  (int index=0; index < QuestionList.size()-1; index++)
            {
                if(QuestionList.get(index).Operator.compareToIgnoreCase(QuestionList.get(index+1).Operator)<0)
                {
                    tempQuestion = QuestionList.get(index);                    
                    QuestionList.set(index, QuestionList.get(index+1));
                    QuestionList.set(index+1, tempQuestion);
                }     
            }
    }
    
    
/****************************************************************

   FUNCTION:   Get Question Values

   ARGUMENTS:  integer: index

   RETURNS:    none

   NOTES:      Gets values for bubble sort
****************************************************************/    
    private void getValuesBubbleSort(int index)
    {
            FirstNumber = QuestionList.get(index).FirstNumber;
            Operator = QuestionList.get(index).Operator;
            SecondNumber = QuestionList.get(index).SecondNumber;
            Answer = QuestionList.get(index).Answer;
    }

/****************************************************************

   FUNCTION:   Refresh Table

   ARGUMENTS:  none

   RETURNS:    Refreshes the grid view table

   NOTES:      It refreshes the table and chooses values from either the List or TempList depending on if it is a bubble sort or other type of sort
****************************************************************/    
    private void RefreshTable()
    {
   DefaultTableModel PreviousQuestionsTable = (DefaultTableModel) tblPreviousQuestions.getModel();
   PreviousQuestionsTable.setRowCount(0);    
    
    for(int index = 0; index<QuestionList.size(); index++)
        {
            if (isBubbleSort == true)
            {
            getValuesBubbleSort(index);
            }
            else 
            {
            getValuesInsertionSort(index);
            }
            Object[] row = { FirstNumber, Operator, SecondNumber, Equals, Answer };
            PreviousQuestionsTable.addRow(row);
        }
        
    }

/****************************************************************

   FUNCTION:   Selection Sort

   ARGUMENTS:  none

   RETURNS:    none

   NOTES:      Uses a selection sort algorithm to sort data in the grid view.
****************************************************************/    
    private void AddToPreviousQuestionsTable()
    {
        getQuestionValues();
        Object[] row = { FirstNumber, Operator, SecondNumber, Equals, Answer };
        AddQuestionToLists(FirstNumber, Operator, SecondNumber, Equals, Answer);

        DefaultTableModel PreviousQuestionsTable = (DefaultTableModel) tblPreviousQuestions.getModel();

        PreviousQuestionsTable.addRow(row);

        PrintLinkedList();
    }

/****************************************************************

   FUNCTION:   Get Question Values

   ARGUMENTS:  none

   RETURNS:    sets question values based on what is in the text fields

   NOTES:      
****************************************************************/    
    private void getQuestionValues()
    {
        FirstNumber = txtFirstNumber.getText();
        Operator = cboOperator.getSelectedItem().toString();
        SecondNumber = txtSecondNumber.getText();
        Answer = txtAnswer.getText();
    }

/****************************************************************

   FUNCTION:   Add Question To Lists

   ARGUMENTS:  First Number, Operator, Second Number, Equals, Answer

   RETURNS:    none

   NOTES:      Adds a question to the doubly linked list, regular list and binary tree
****************************************************************/        
    private void AddQuestionToLists(String firstno, String operator, String secondno, String equals, String ans)
    {
        Question CurrentQuestion = new Question (firstno, operator, secondno, equals, ans);   
        QuestionDLL.addFirst(CurrentQuestion, CurrentQuestion);
        QuestionList.add(CurrentQuestion);
        AddToBinaryTree(CurrentQuestion);
    }

/****************************************************************

   FUNCTION:   Add To Binary Tree

   ARGUMENTS:  Question Data

   RETURNS:    none

   NOTES:      Needs a 'Question' as the object in order to add it as the object to a node and add it to a tree
****************************************************************/    
    private void AddToBinaryTree(Question Qdata)
    {    
        bt.addNode(QuestionDLL, null, null, Qdata);
    }

/****************************************************************

   FUNCTION:   Calculate

   ARGUMENTS:  none

   RETURNS:    none

   NOTES:      General calculator performing 4 functions
****************************************************************/    
    private void Calculator(){        
        switch (cboOperator.getSelectedItem().toString()) {
                case "+":
                    AdditionQuestion();
                    break;
                case "-":
                    SubtractionQuestion();
                    break;
                case "X":
                    MultiplicationQuestion();
                    break;
                default:
                    DivisionQuestion();
                    break;
            }}

/****************************************************************

   FUNCTION:   Addition

   ARGUMENTS:  none

   RETURNS:    answer

   NOTES:      Adds two floats from first number and second number
****************************************************************/    
    private void AdditionQuestion()
    {
        Float y = Float.parseFloat(txtFirstNumber.getText());
        Float x = Float.parseFloat(txtSecondNumber.getText());    
        Float z = x+y;    
        txtAnswer.setText(Float.toString(z));
    }


/****************************************************************

   FUNCTION:   Subtraction

   ARGUMENTS:  none

   RETURNS:    answer

   NOTES:      Subtracts two floats from first number and second number
****************************************************************/    
    private void SubtractionQuestion()
    {
        Float y = Float.parseFloat(txtFirstNumber.getText());
        Float x = Float.parseFloat(txtSecondNumber.getText());    
        Float z = y-x;
    txtAnswer.setText(Float.toString(z));
    }

/****************************************************************

   FUNCTION:   Multiply

   ARGUMENTS:  none

   RETURNS:    answer

   NOTES:      Multiplies two floats
****************************************************************/    
    private void MultiplicationQuestion()
    {
        Float y = Float.parseFloat(txtFirstNumber.getText());
        Float x = Float.parseFloat(txtSecondNumber.getText());    
        Float z = y*x;
        DecimalFormat df = new DecimalFormat("#.##");      
        z = Float.valueOf(df.format(z));
    txtAnswer.setText(Float.toString(z));
    }
    
/****************************************************************

   FUNCTION:   Divide

   ARGUMENTS:  none

   RETURNS:    answer

   NOTES:      Divides two floats
****************************************************************/    
    private void DivisionQuestion()
    {
        Float y = Float.parseFloat(txtFirstNumber.getText());
        Float x = Float.parseFloat(txtSecondNumber.getText());     
        Float z = y/x;
        DecimalFormat df = new DecimalFormat("#.##");      
        z = Float.valueOf(df.format(z));
    txtAnswer.setText(Float.toString(z));
    }

/****************************************************************

   FUNCTION:   Add Operators

   ARGUMENTS:  none

   RETURNS:    none

   NOTES:      Attaches the 4 operators to the combo box
****************************************************************/    
    private void AddOperators()
    {
            cboOperator.addItem("+");
            cboOperator.addItem("-");
            cboOperator.addItem("X");
            cboOperator.addItem("/");
    }
    //END SEND BUTTON


/****************************************************************

   FUNCTION:   Print Linked List

   ARGUMENTS:  none

   RETURNS:    none

   NOTES:      Prints linked list after it has been added to DLL
****************************************************************/    
    private void PrintLinkedList()
    {
        txtLinkedList.setText(QuestionDLL.QuestionToString());
    }



////CHAT RELATED METHODS////
    
/****************************************************************

   FUNCTION:   Connect

   ARGUMENTS:  Server Name, Server Port

   RETURNS:    none

   NOTES:      Tries to connect using specified server name and server port or throws exception
****************************************************************/    
    public void connect(String serverName, int serverPort)
        {
            println("Establishing connection. Please wait ...");
            try
            {
                socket = new Socket(serverName, serverPort);
                println("Connected: " + socket);
                jpConnect.setBackground(java.awt.Color.cyan);
                open();
            }
            catch (UnknownHostException uhe)
            {
                println("Host unknown: " + uhe.getMessage());
            }
            catch (IOException ioe)
            {
                println("Unexpected exception: " + ioe.getMessage());
            }
        }
    
/****************************************************************

   FUNCTION:   Send To Student

   ARGUMENTS:  none

   RETURNS:    none

   NOTES:      Writes out in a UTF format the question and answer to the server,
               the server code will then send it to student/client2, flushes itself so the stream is clear.
****************************************************************/    
        private void SendToStudent()
        {
            try
            {
                streamOut.writeUTF(txtFirstNumber.getText()+cboOperator.getSelectedItem()+txtSecondNumber.getText()+","+txtAnswer.getText());// Writes the Question Only and sends it to the student
               // streamOut.writeFloat(Float.parseFloat(txtAnswer.getText()));
                streamOut.flush();
            }
            catch (IOException ioe)
            {
                println("Sending error: " + ioe.getMessage());
                close();
            }
        }
        
/****************************************************************

   FUNCTION:   Handle

   ARGUMENTS:  String: msg

   RETURNS:    none

   NOTES:      if the string/msg it receives is ".bye" it will close itself, or else it will print the message
****************************************************************/    
        public void handle(String msg)
        {
            if (msg.equals(".bye"))
            {
                println("Good bye. Press EXIT button to exit ...");
                close();
            }
            else
            {
                println(msg);
            }
        }

/****************************************************************

   FUNCTION:   Open

   ARGUMENTS:  none

   RETURNS:    none

   NOTES:      Creates a new DataOutputStream by using method of getting the stream from a socket.
               Creates a new client thread
****************************************************************/            
        public void open()
        {
            try
            {
                streamOut = new DataOutputStream(socket.getOutputStream());
                client = new ClientThread1(this, socket);
            }
            catch (IOException ioe)
            {
                println("Error opening output stream: " + ioe);
            }
        }

/****************************************************************

   FUNCTION:   Close

   ARGUMENTS:  none

   RETURNS:    none

   NOTES:      Closes the stream and socket if they don't equal null which should be always, closes the client at the end
****************************************************************/            
        public void close()
        {
            try
            {
                if (streamOut != null)
                {
                    streamOut.close();
                }
                if (socket != null)
                {
                    socket.close();
                }
            }
            catch (IOException ioe)
            {
                println("Error closing ...");
            }
            client.close();
            client.stop();
        }

/****************************************************************

   FUNCTION:   Print Line

   ARGUMENTS:  none

   RETURNS:    none

   NOTES:      Sets lblMsg's text to the msg from the server
****************************************************************/            
        void println(String msg)
        {
            //display.appendText(msg + "\n");
            lblMsg.setText(msg);
        }

/****************************************************************

   FUNCTION:   Get Parameters

   ARGUMENTS:  none

   RETURNS:    none

   NOTES:      Sets server name and port
****************************************************************/            
        public void getParameters()
        {
    //        serverName = getParameter("host");
    //        serverPort = Integer.parseInt(getParameter("port"));

            serverName = "localhost";
            serverPort = 4445;        
        }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBubbleSortOperator;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDisplayBinaryTree;
    private javax.swing.JButton btnDisplayHashMap;
    private javax.swing.JButton btnDisplayInOrder;
    private javax.swing.JButton btnDisplayPostOrder;
    private javax.swing.JButton btnDisplayPreOrder;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnInsertionSort;
    private javax.swing.JButton btnSelectionSort;
    private javax.swing.JButton btnSend;
    private javax.swing.JComboBox cboOperator;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel jpConnect;
    private javax.swing.JLabel lblAnswer;
    private javax.swing.JLabel lblArrayOfQuestions;
    private javax.swing.JLabel lblBinaryTree;
    private javax.swing.JLabel lblFirstNumber;
    private javax.swing.JLabel lblLinkedList;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JLabel lblOperator;
    private javax.swing.JLabel lblQuestionPrompt;
    private javax.swing.JLabel lblSecondNumber;
    private javax.swing.JLabel lblSort;
    private javax.swing.JTable tblPreviousQuestions;
    private javax.swing.JTextField txtAnswer;
    private javax.swing.JTextArea txtBinaryTree;
    private javax.swing.JTextField txtFirstNumber;
    private javax.swing.JTextArea txtLinkedList;
    private javax.swing.JTextField txtSecondNumber;
    // End of variables declaration//GEN-END:variables
}
